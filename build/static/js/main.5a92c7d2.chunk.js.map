{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","domain","setDomain","success","setSuccess","fullUrl","setFullUrl","now","Date","utc_timestamp","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","useEffect","chrome","tabs","query","active","currentWindow","url","URL","hostname","className","onClick","obj","timestamp","username","Promise","resolve","reject","fetch","method","headers","Origin","body","JSON","stringify","then","response","data","console","log","Boolean","window","location","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"sPAsEeA,MAlEf,WAAgB,IAAD,EACeC,mBAAS,IADxB,mBACNC,EADM,KACEC,EADF,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGiBJ,mBAAS,IAH1B,mBAGNK,EAHM,KAGGC,EAHH,KAIPC,EAAM,IAAIC,KACVC,EAAgBD,KAAKE,IACzBH,EAAII,iBACJJ,EAAIK,cACJL,EAAIM,aACJN,EAAIO,cACJP,EAAIQ,gBACJR,EAAIS,gBACJT,EAAIU,sBAyCN,OAvCAC,qBAAU,WACRC,OAAOC,KAAKC,MAAM,CAAEC,QAAQ,EAAMC,eAAe,IAAQ,SAACH,GACxD,IAAMI,EAAM,IAAIC,IAAIL,EAAK,GAAGI,KAC5BtB,EAAUsB,EAAIE,UACdpB,EAAWc,EAAK,GAAGI,UAGpB,IAiCD,yBAAKG,UAAU,OACb,4BAAQA,UAAU,aAChB,4BAAK1B,GACL,4BAAQ2B,QAAS,kBAnCP,WACd,IAAMC,EAAM,CACVC,UAAWrB,EACXsB,SAAU,gBACV9B,OAAQA,EACRuB,IAAKnB,GAEP,OAAO,IAAI2B,SAAQ,SAACC,EAASC,GAC3BC,MAAM,4CAA6C,CACjDC,OAAQ,OACRC,QAAS,CACPC,OAAQ,GACR,8BAA+B,IAC/B,+BAAgC,kCAChC,yBAA0B,IAC1B,0BACE,4DACF,4BACE,4DACF,eACE,0FAEJC,KAAMC,KAAKC,UAAUZ,KAEpBa,MAAK,SAACC,GAAD,OAAcA,KACnBD,MAAK,SAACE,GACLC,QAAQC,IAAI,WAAYF,GACxBxC,EAAW,WAQUwB,IAAWD,UAAU,iBAA5C,UAGA,4BAAiB,MAAZxB,EAAkB,UAAY,OCpDvB4C,QACW,cAA7BC,OAAOC,SAASvB,UAEe,UAA7BsB,OAAOC,SAASvB,UAEhBsB,OAAOC,SAASvB,SAASwB,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjB,QAAQiB,MAAMA,EAAMC,c","file":"static/js/main.5a92c7d2.chunk.js","sourcesContent":["/*global chrome*/\nimport React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"./App.css\";\nfunction App() {\n  const [domain, setDomain] = useState(\"\");\n  const [success, setSuccess] = useState(\"\");\n  const [fullUrl, setFullUrl] = useState(\"\");\n  const now = new Date();\n  const utc_timestamp = Date.UTC(\n    now.getUTCFullYear(),\n    now.getUTCMonth(),\n    now.getUTCDate(),\n    now.getUTCHours(),\n    now.getUTCMinutes(),\n    now.getUTCSeconds(),\n    now.getUTCMilliseconds()\n  );\n  useEffect(() => {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      const url = new URL(tabs[0].url);\n      setDomain(url.hostname);\n      setFullUrl(tabs[0].url);\n      // this.getHeadlines(domain);\n    });\n  }, []);\n  const onClick = () => {\n    const obj = {\n      timestamp: utc_timestamp,\n      username: \"user@user.com\",\n      domain: domain,\n      url: fullUrl,\n    };\n    return new Promise((resolve, reject) => {\n      fetch(\"http://youta-api.ngrok.io/starter-project\", {\n        method: \"post\",\n        headers: {\n          Origin: \"\",\n          \"Access-Control-Allow-Origin\": \"*\",\n          \"Access-Control-Allow-Methods\": \"POST, GET, OPTIONS, DELETE, PUT\",\n          \"Access-Control-Max-Age\": \"0\",\n          \"Content-Security-Policy\":\n            \"default-src *; connect-src *; script-src *; object-src *;\",\n          \"X-Content-Security-Policy\":\n            \"default-src *; connect-src *; script-src *; object-src *;\",\n          \"X-Webkit-CSP\":\n            \"default-src *; connect-src *; script-src 'unsafe-inline' 'unsafe-eval' *; object-src *\",\n        },\n        body: JSON.stringify(obj),\n      })\n        .then((response) => response)\n        .then((data) => {\n          console.log(\"Success:\", data);\n          setSuccess(200);\n        });\n    });\n  };\n  return (\n    <div className=\"App\">\n      <header className=\"Container\">\n        <h1>{domain}</h1>\n        <button onClick={() => onClick()} className=\"submit_button\">\n          Submit\n        </button>\n        <h2>{success === 200 ? \"Success\" : \"\"}</h2>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}